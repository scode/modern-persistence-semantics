= Modern persistence semantics =

This is intended to be a crash-course in real-life concerns with
persistence and storage.

== Why you should read this ==

You should read this because at the end, the aim is that:

* You will understand why and when it is, *and when it is not*, safe to rely on atomic
  snapshots (such as EBS snapshots or LVM snapshots) in a backup
  situation.
* You will have some idea of how to answer the question "is my system
  going to be consistent after a power outage affected my server?".
* You will understand what "crash-consistent" means.
* You will understand why, after a crash using a database that is not
  designed to be recoverable from a crash-consistent state, it is extremely
  unsafe to start your database and "see if it works".
* You will understand why there is a significant difference between a
  database system that looses the last /n/ seconds or transactions on
  crash, and a database system which suffers arbitrary corruption on
  crash - and how to understand into which category your database falls.
* You will understand how and why a battery-backed hardware RAID
  controller can yield huge performance improvements beyond normal
  platters.
* You will understand why a hardware RAID controller is not *always*
  going to improve performance.
* You will understand what the primary purpose of the traditional fsck
  command is, and why it is not what most people think.
* You will understand the role of a journal in a modern file system or database.
* You will understand what a "write barrier" is.
* You will understand the difference between arbitrary corruption and
  intended inconsistencies.

== Block devices ==
== File systems ==
== Databases ==



